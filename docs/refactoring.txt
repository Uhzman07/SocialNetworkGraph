Class-level Refactoring Report
==========

For each refactoring opportunity , please provide the following information:
    - where the issue is
    - what SOLID principle (if any) are violated
    - whether a class implementation or class interface refactoring
      is needed
    - a brief description of each issue
    - how to fix the issue

CLASS-LEVEL REFACTORING IMPLEMENTED

Refactoring 0:
  Location: FriendRecommender.java
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: Class Implementation
	Cause: FriendRecommender.java is assuming two main tasks - "Collecting and computing input users in the appropriate way" and also "Recommending friends for users based on the relationship input"
	Fix: FriendRecommender.java should only be allowed to handle recommending friends for users and then a different class "InputManager" should be able to handle collecting the input like a main method

Refactoring 1:
  Location: User.java
	SOLID principle: Single Responsibility
	class implementation or class interface: Class Implementation
	Cause: User.java should not have to handling how relationships should affect users. It should stick to handling the details about the user
	Fix: The new created interface "Relationship" contains methods that will allow the Relationship class "FriendRelationship" and "FollowsRelationship" handle such tasks

Refactoring 2:
  Location: User.java
	SOLID principle: Dependency Inversion Principle
	class implementation or class interface: Class Implementation
	Cause: Variables such as the "name" and "adjacency" of users should not be exposed by making them public variables
	Fix: A method should be in place to access the "name" and "adjacency" but not to set it. Thus, these variables should be made private.

CLASS-LEVEL REFACTORING SUGGESTED BUT NOT IMPLEMENTED

Refactoring 2:
  Location: User
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: Class Implementation
	Cause: Being able to access the Users directly from a single User class is not a good idea
	Fix: A general Map (like a pool) class could be created separately that holds the possible users and then each user class should handle holding the User details and the connected users(adjacency list)

Refactoring 3:
  Location:
	SOLID principle:
	class implementation or class interface:
	Cause:
	Fix:

